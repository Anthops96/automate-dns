apiVersion: batch/v1
kind: CronJob
metadata:
  name: elastic-certificates-secrets-generator
  namespace: elastic-stack
spec:
  schedule: "0 0 31 2 *"  # Manual execution only
  jobTemplate:
    spec:
      template:
        spec:
          nodeSelector:
            node-role.kubernetes.io/worker: "true"
          serviceAccountName: secret-writer
          containers:
          - name: certificate-generator
            image: elasticsearch/elasticsearch:8.17.0
            securityContext:
              runAsUser: 0
            command:
            - /bin/bash
            - -c
            - |
              set -e
              declare -A fqdns
              fqdns=(
                  [1]='testdns')
              rm -rf /certs/elastic-certificates.zip
              echo -e 'instances:' > /certs/instances.yml
              for fqdn in "${fqdns[@]}"; do rm -rf /certs/$fqdn/; done
              for fqdn in "${fqdns[@]}"; do echo -e "  - name: \"$fqdn\"\n    dns:\n      - \"$fqdn.example.com\"" >> /certs/instances.yml; done
              echo "Generating node certificates..."
              bin/elasticsearch-certutil cert --days 3600 --multiple --in /certs/instances.yml --ca-cert /certs/ca/ca.crt --ca-key /certs/ca/ca.key --silent --ca-pass "Password" --pass "Password" --out /certs/elastic-certificates.zip
              unzip /certs/elastic-certificates.zip -d /certs
              ls -la /certs
              touch /certs/step1_done
            volumeMounts:
            - name: certs
              mountPath: /certs
          - name: secret-creator
            image: ubuntu:noble
            securityContext:
              runAsUser: 0
            command:
            - /bin/bash
            - -c
            - |
              set -e
              echo "Types: deb" > /etc/apt/sources.list.d/ubuntu.sources
              echo "URIs: http://archive.ubuntu.com/ubuntu/" >> /etc/apt/sources.list.d/ubuntu.sources
              echo "Suites: noble noble-updates noble-backports" >> /etc/apt/sources.list.d/ubuntu.sources
              echo "Components: main restricted universe multiverse" >> /etc/apt/sources.list.d/ubuntu.sources
              echo "Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg" >> /etc/apt/sources.list.d/ubuntu.sources

              echo "Types: deb" >> /etc/apt/sources.list.d/ubuntu.sources
              echo "URIs: http://archive.ubuntu.com/ubuntu/" >> /etc/apt/sources.list.d/ubuntu.sources
              echo "Suites: noble noble-updates noble-backports" >> /etc/apt/sources.list.d/ubuntu.sources
              echo "Components: main restricted universe multiverse" >> /etc/apt/sources.list.d/ubuntu.sources
              echo "Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg" >> /etc/apt/sources.list.d/ubuntu.sources
              apt update
              apt install openssl -y
              apt update && apt install -y openssl curl
              while [ ! -f /certs/step1_done ]; do sleep 1; done;
              rm -rf /certs/step1_done
              declare -A fqdns
              fqdns=(
                  [1]='testdns')
              echo "Generating cert and key from .p12..."
              for fqdn in "${fqdns[@]}"; do openssl pkcs12 -in /certs/$fqdn/$fqdn.p12 -out /certs/$fqdn/$fqdn.key -nocerts -nodes -password pass:Password -passout pass:Password; done
              for fqdn in "${fqdns[@]}"; do openssl pkcs12 -in /certs/$fqdn/$fqdn.p12 -out /certs/$fqdn/$fqdn.crt -clcerts -nokeys -password pass:Password -passout pass:Password; done
              for fqdn in "${fqdns[@]}"; do
                echo "[+] Creating secret for $base"
                CRT=$(base64 -w 0 "/certs/$fqdn/$fqdn.crt")
                KEY=$(base64 -w 0 "/certs/$fqdn/$fqdn.key")
                echo '{
                  "apiVersion": "v1",
                  "kind": "Secret",
                  "metadata": {
                    "name": "tls-'"$fqdn"'"
                  },
                }' > /tmp/secret.json

                curl -k -X POST \
                  --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
                  --header "Content-Type: application/json" \
                  --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
                  --data-binary @/tmp/secret.json \
                  "https://${KUBERNETES_SERVICE_HOST}/api/v1/namespaces/${POD_NAMESPACE}/secrets" || \
                {
                  echo "Updating existing secret..."
                  curl -k -X PUT \
                    --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
                    --header "Content-Type: application/json" \
                    --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
                    --data-binary @/tmp/secret.json \
                    "https://${KUBERNETES_SERVICE_HOST}/api/v1/namespaces/${POD_NAMESPACE}/secrets/tls-$fqdn"
                }
              done
              echo "[âœ“] All secrets created/updated"
            env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            volumeMounts:
            - name: certs
              mountPath: /certs

          restartPolicy: Never
          volumes:
          - name: certs
            persistentVolumeClaim:
              claimName: elastic-certs-cephfs-pvc
      backoffLimit: 1
